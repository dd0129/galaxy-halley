<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           "
       default-lazy-init="true" default-autowire="byName">


    <context:annotation-config/>
    <context:component-scan base-package="com.dianping"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--<pigeon:annotation />-->
    <bean name="placeholder" lazy-init="false" class="com.dianping.lion.client.InitializeConfig">
    </bean>

    <bean id="dataSourcePool"
          class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">

        <property name="jdbcUrl" value="${galaxy-halley.JDBC.url}"></property>
        <property name="user" value="${galaxy-halley.JDBC.username}"></property>
        <property name="password" value="${galaxy-halley.JDBC.password}"></property>
        <property name="driverClass" value="${galaxy-halley.JDBC.driver}"></property>

        <!--<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/dianpingdw?useUnicode=true&amp;characterEncoding=utf-8"></property>-->
        <!--<property name="user" value="root"></property>-->
        <!--<property name="password" value=""></property>-->
        <!--<property name="driverClass" value="com.mysql.jdbc.Driver"></property>-->

        <!-- 详细参数说明参见database-config.properties -->
        <property name="initialPoolSize" value="3"></property>
        <property name="minPoolSize" value="5"></property>
        <property name="maxPoolSize" value="20"></property>
        <property name="maxIdleTime" value="140"></property>
        <property name="acquireIncrement" value="3"></property>
        <property name="idleConnectionTestPeriod" value="60"></property>
        <property name="acquireRetryAttempts" value="20"></property>
        <property name="acquireRetryDelay" value="2000"></property>
        <property name="breakAfterAcquireFailure" value="false"></property>
        <property name="testConnectionOnCheckout" value="false"></property>
        <property name="checkoutTimeout" value="10000"></property>
        <property name="preferredTestQuery" value="select 1"></property>
        <!--连接池中保留的最小连接数。-->

        <!--连接池中保留的最大连接数。Default: 15 -->

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->

        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
         属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
         如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->

        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
         保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
         获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->

        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
         时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
         等方法来提升连接测试的性能。Default: false -->
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourcePool"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"-->
    <!--p:sqlSessionFactory-ref="sqlSessionFactory" p:basePackage="com.dianping.data.warehouse.dao" />-->

    <bean id="instanceDAO" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface"
                  value="com.dianping.data.warehouse.dao.InstanceDAO"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>
    <bean id="taskDAO" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface"
                  value="com.dianping.data.warehouse.dao.TaskDAO"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="exceptionDAO" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface"
                  value="com.dianping.data.warehouse.dao.ExceptionDAO"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSourcePool"/>

    <!-- transaction -->
    <aop:config>
        <aop:pointcut id="defaultServiceOperation"
                      expression="execution(* com.dianping.data.warehouse.dao.proxy.*.*(..))"/>
        <aop:advisor pointcut-ref="defaultServiceOperation" advice-ref="defaultTxAdvice"/>
    </aop:config>

    <tx:advice id="defaultTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*"/>
            <!--<tx:method name="*"/>-->
        </tx:attributes>
    </tx:advice>

    <bean id="reset" class="com.dianping.data.warehouse.executer.ResetExecuter"/>
    <bean id="exceptionService" class="com.dianping.data.warehouse.utils.ExceptionAnalyze" />
    <bean id="preInit" class="com.dianping.data.warehouse.executer.PreInitExecuter" />


</beans>